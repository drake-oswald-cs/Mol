<Program>     ::= <Definitions>

<Definitions> ::= <Function> <Definitions>
                |   E

<Function>    ::= fn <Identifier> ( <Formals> ) <Type> { <Body> }

<Formals>     ::= <NEFormals>
                |   E

<NEFormals>   ::= <Formal> , <NEFormals>
                | <Formal>

<Formal>      ::= <Type> <Identifier>

<Type>        ::= int
                | bool
                | mat
                | vct

<Body>        ::= <Declaration> ; <Body>
		| <Set> ; <Body>
		| <Print> ; <Body>
		| { <If> } <Body
		| { <If> }
		| <Return>;

<Declaration> ::= <Type> <Identifier> = <Expr>

<Set>         ::= set(<Identifier>, <Reference>)
       
<Reference>   ::= E
                | <NERef>

<NERef>       ::= <Literal>, <NERef>
                 |<Literal>
                 |<Identifier>, <NERef>
                 |<Identifier>

<Print>       ::= print( <Expr> )

<If>          ::= if <Expr> { <Body> } else { <Body> }

<Return>      ::= return <Expr>

<Expr>        ::= <Expr> < <Simple-Exp>
                | <Expr> <= <Simple-Exp>
                | <Expr> == <Simple-Exp>
                | <Expr> != <Simple-Exp>
                | <Simple-Exp>

<Simple-Exp>  ::= <Simple-Exp> or <Term>
                | <Simple-Exp> nor <Term>
                | <Simple-Exp> + <Term>
                | <Simple-Exp> - <Term>
                | <Term>

<Term>        ::= <Term> and <Factor>
                | <Term> nand <Factor>
                | <Term> * <Factor>
                | <Term> / <Factor>
                | <Factor>

<Factor>      ::= not <Factor>
		| - <Factor>
		| <Identifier> ( <Actuals> ) <Expr>
		| <Identifier>
		| <Identifier> [ <Accessor> ]
		| <Literal>
		| [ <Declar> ]
		| ( <Expr> )

<Actuals>     ::= <NEActuals>
                | E

<NEActuals>   ::= <Expr>
                | <Expr> , <NEActuals>

<Declar>      ::= E
		| <NEDeclar>

<NEDeclar>    ::= <Vector>
                | <Matrix>

<Vector>      ::= <Things> <Things>
                | <Things>

<Things>      ::= <Literal>
		| <Identifier>
		| [ <Declar> ]

<Matrix>      ::= <Numb_list> ; <Numb_list>

<Numb-List>   ::= <Literal> <Literal>
		| <Literal>		

<Accessor>    ::= <Literal> ; <Literal>
		| <Literal>

<Literal>     ::= <Number>
                | <Boolean>




Note: Whitespace is only significant in <Formal>, <Vector>,
and <Numb-List>.
