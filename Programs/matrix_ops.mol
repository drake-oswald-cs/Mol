#The puropose of this program is to provide
 examples of matrix operations.           #

fn main() mat {
    #The following demonstrates matrix
     declaration and accessing:           #

    mat a = [2 3 2; 4 5 2; 1 1 2];

    #this declaration corresponds to:
          [ 2 3 2 ]
          [ 4 5 2 ]
          [ 1 1 2 ]                       #

    print(a[1;1]);

    #The expected output of this print
     statement would be 5. The accessor for
     a matrix expects:
         matrix[row;column];
 
     please note that the rows and columns
     both begin indexing at 0. So to print
     the integer in the top left corner of 
     the matrix, one would enter:         #

    print(a[0;0]);

    #Output: 2                            #

    mat mt = [1 2; 3 4];
   
    mt[0;0] = 5;

    print(mt);

    #The above statement is a statement to
     update the value of mt at spot [0;0] 
     to the value of 5. Output:
          [5 2; 3 4]                      
     
     SPEC CHANGE:
         I had previously not allowed matricies
         to set things outside of its specified
         range. However, when writing further
         test programs it became too difficult
         to add rows or columns. So, if you
         set any value outside of a matrix's size,
         zeros will be added to either the rows 
         or columns to maintain the rectangularity
         of the matrix.				 #

    mat addRow = [1 1; 2 2; 3 3];

    addRow[3;0] = 4;

    print(addRow);

    #Output: [1 1; 2 2; 3 3; 4 0]#

    mat addColumn = addRow;

    addColumn[3;2] = 4;

    print(addColumn);

    #Output: [1 1 0; 2 2 0; 3 3 0; 4 0 4]#

    mat addBoth = addColumn;

    addBoth[4;3] = 5;

    print(addBoth);

    #Output: [1 1 0 0;
              2 2 0 0;
              3 3 0 0;
              4 0 4 0;
              0 0 0 5] #

    vct size = dim(a);

    #dim stands for dimensions. It outputs
     a vector with two integers, [m n], 
     where m represents the number of rows
     and n represents the number of 
     columns. In the above example, size
     would be [3 3].                      #

    print(2 * a);

    #When multiplying a matrix and an int
     the int is treated as a scalar in
     and multiplies each operation in the 
     matrix by that number. So the
     expected output of the above print
     would be:
         [4 6 4; 8 10 4; 2 2 4]

     The same follows for the + - and /
     operators. These operations are not
     technically correct... but I have 
     included them. I may remove them 
     later.                               #

    mat b = [ 2 3 4; 2 1 1; 4 2 5];

    mat c = b * a;

    mat d = a * b;

    print(c);

    print(d);

    #The above shows matrix multiplication
     the expected output of each  is:
         [20 25 18; 9 12 8; 21 27 22]
         [12 13 21; 26 21 31; 12 8 15]   #

    print(a+b);

    #Matrix addition and subtraction takes
     in two matricies of the same size and
     applies the operation to the items
     in the corrosponding spots. Output:
        [4 6 6; 6 6 3; 5 3 7]            #

    vct v = [1 2 -1];

    mat m = [1 0 0; 0 1 0; 0 0 1];

    print(m * v);

    #Each item in the nth column of the 
     matrix has the nth item in the vector 
     applied to it. Expected output:
         [1 0 0; 0 2 0; 0 0 -1]
  

     Note, order doesn't matter. Mathematicians
     have a standard order of matrix operation
     vector, but I do not uphold this.
     Operations: + - * /. Please note: matrix 
     vector addition and subtraction are not
     held as proper operations I have 
     included them for my personal whims. #    

    return m;

}

    

    
  
